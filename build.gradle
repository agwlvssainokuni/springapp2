apply plugin: "java"
apply plugin: "eclipse"

allprojects {
	version = "1.0"
	ext {
		propInstid = (rootProject.hasProperty("instid") ? rootProject.getProperty("instid") : "00")
		propEnvname = (rootProject.hasProperty("envname") ? rootProject.getProperty("envname") : "develop")
		propWithEclipse = (rootProject.hasProperty("withEclipse") ? rootProject.getProperty("withEclipse") == "true" : false)
	}
}

subprojects {

	apply plugin: "java"
	apply plugin: "eclipse-wtp"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	sourceSets {
		delivery
		generated
		testGenerated
	}

	compileJava.options.encoding = "UTF-8"
	compileTestJava.options.encoding = "UTF-8"
	compileDeliveryJava.options.encoding = "UTF-8"
	compileGeneratedJava.options.encoding = "UTF-8"
	compileTestGeneratedJava.options.encoding = "UTF-8"

	processDeliveryResources {

		def props = new Properties()
		[rootProject.file("tokens.properties"), rootProject.file("tokens/${propEnvname}.properties"), rootProject.file("tokens/${propEnvname}_${propInstid}.properties")]*.with {
			if (exists()) {
				withInputStream { props.load(it) }
			}
		}
		props.setProperty("tokens.instid", propInstid)
		props.setProperty("tokens.envname", propEnvname)
		def topdir = props.getProperty("tokens.topdir", "/opt/${rootProject.name}")
		props.setProperty("tokens.topdir", topdir)
		def basedir = props.getProperty("tokens.basedir", "${topdir}/${propInstid}")
		props.setProperty("tokens.basedir", basedir)
		def appname = props.getProperty("tokens.${project.name}.name", project.name)
		props.setProperty("tokens.${project.name}.name", appname)
		props.setProperty("tokens.app.name", appname)
		def appdir = props.getProperty("tokens.app.dir", "${basedir}/${appname}")
		props.setProperty("tokens.app.dir", appdir)
		def confdir = props.getProperty("tokens.app.confdir", "${appdir}/conf")
		props.setProperty("tokens.app.confdir", confdir)
		def logdir = props.getProperty("tokens.app.logdir", "${appdir}/log")
		props.setProperty("tokens.app.logdir", logdir)
		def jobdir = props.getProperty("tokens.app.jobdir", "${appdir}/job/\${jobId}")
		props.setProperty("tokens.app.jobdir", jobdir)

		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: props)
		rename("\\.template\$", "")
	}

	task deliveryJar(type: Jar, dependsOn: deliveryClasses) {
		from sourceSets.delivery.output.classesDir
		from sourceSets.delivery.output.resourcesDir
		appendix = "delivery"
	}

	task generatedJar(type: Jar, dependsOn: generatedClasses) {
		from sourceSets.generated.output.classesDir
		from sourceSets.generated.output.resourcesDir
		appendix = "generated"
	}

	task testGeneratedJar(type: Jar, dependsOn: testGeneratedClasses) {
		from sourceSets.testGenerated.output.classesDir
		from sourceSets.testGenerated.output.resourcesDir
		appendix = "testGenerated"
	}

	artifacts {
		deliveryRuntime deliveryJar
		generatedRuntime generatedJar
		testGeneratedRuntime testGeneratedJar
	}

	configurations {
		compileExt
		compile.extendsFrom(compileExt)
	}

	repositories { mavenCentral() }

	configurations {
		all*.exclude group: "commons-logging", module: "commons-logging"
	}

	ext {
		// elemental
		versionGuava = "22.0"
		versionCommonsLang3 = "3.5"
		versionCommonsCollections4 = "4.1"
		versionCommonsCodec = "1.10"
		versionSlf4j = "1.7.25"
		versionLogback = "1.2.3"
		versionPoi = "3.16"
		versionFluentLogger = "0.3.2"
		// fundamental
		versionFreemarker = "2.3.23"
		versionIcu4j = "59.1"
		versionQuerydsl = "4.1.4"
		versionJackson = "2.8.8"
		versionAspectJ = "1.8.10"
		versionAopalliance = "1.0"
		versionSpring = "4.3.9.RELEASE"
		versionSpringSecurity = "4.2.3.RELEASE"
		versionSpringMobile = "1.1.5.RELEASE"
		versionHibernateValidator = "5.4.1.Final"
		versionJavaMail = "1.4.7"
		versionJavaValidation = "1.1.0.Final"
		versionJavaEl = "3.0.0"
		versionJavaServlet = "3.1.0"
		versionJavaJsp = "2.3.1"
		versionJavaJms = "1.1-rev-1"
		versionJavaTransaction = "1.1-rev-1"
		versionH2db = "1.4.195"
		versionFlyway = "4.2.0"

		// galleryapp
		versionGroovy = "2.4.11"
		versionTiles = "3.0.7"
		versionJstl = "1.2"
		versionLombok = "1.16.16"

		// all
		versionJunit = "4.12"
		versionHamcrest = "1.3"
		versionMockito = "2.8.9"
	}

	dependencies {
		testCompile "junit:junit:${versionJunit}"
		testCompile "org.hamcrest:hamcrest-all:${versionHamcrest}"
		testCompile "org.mockito:mockito-core:${versionMockito}"
	}

	def resourceDir = "src/main/resources"
	if (file("${resourceDir}/${project.name}.txt").isFile()) {
		task native2ascii << {
			ant.native2ascii(src: resourceDir, dest: resourceDir, ext: ".properties", includes: "${project.name}*.txt", encoding: "UTF-8")
		}
	}

	def messageDir = "src/main/resources/message"
	if (file("${messageDir}/form").isDirectory()) {
		task mergeformmessage << {
			ant.concat(destfile: "${messageDir}/form/${project.name}-form.properties", encoding: "UTF-8", outputencoding: "UTF-8") {
				fileset(dir: "${messageDir}/form/") {
					include(name: "**.txt")
					exclude(name: "**.properties")
				}
			}
			ant.native2ascii(src: "${messageDir}/form/", dest: "${messageDir}/", includes: "${project.name}-form.properties", encoding: "UTF-8")
		}
	}
}
